using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Shared.Application.Data;
using Shared.Domain.Entity;

namespace Shared.Application.Repository;

public interface IRepositoryBase
{
    Type GetEntityType();
}

public interface IRepositoryBase<TEntity> : IDbContextEntityAction, IRepositoryBase where TEntity : EntityBase
{
    /// <summary>
    ///     Creates new or Updates existing entity in a set
    /// </summary>
    /// <param name="entity"></param>
    /// <remarks>Use to save entity which already appear in a set, or create new which is to be uniquely identified</remarks>
    /// <remarks><br />Created entity Id is generated by underlying data storage</remarks>
    void Save(TEntity entity);

    /// <summary>
    ///     Creates new or Updates existing entities in a set
    /// </summary>
    /// <param name="entities"></param>
    /// <remarks>Use to save entities which already appear in a set, or create new which is to be uniquely identified</remarks>
    /// <remarks><br />Created entities Id is generated by underlying data storage</remarks>
    void Save(IEnumerable<TEntity> entities);

    /// <summary>
    ///     Adds entity to set
    /// </summary>
    /// <param name="entity"></param>
    /// <remarks>Use to add entity which is uniquely identified, yet not appearing in a set</remarks>
    /// <remarks><br />Added entity which is uniquely identified, can not be created, but can be added. Useful for saving entity received from remote resource</remarks>
    void Add(TEntity entity);

    /// <summary>
    ///     Adds entities to set
    /// </summary>
    /// <param name="entities"></param>
    /// <remarks>Use to add entities which are uniquely identified, yet not appearing in a set</remarks>
    /// <remarks><br />Added entities which are uniquely identified, can not be created, but can be added. Useful for saving entities received from remote resource</remarks>
    void Add(IEnumerable<TEntity> entities);

    /// <summary>
    ///     Adds entity to set
    /// </summary>
    /// <param name="entity"></param>
    /// <param name="cancellationToken"></param>
    /// <remarks>Use to add entity which is uniquely identified, yet not appearing in a set</remarks>
    /// <remarks><br />Added entity which is uniquely identified, can not be created, but can be added. Useful for saving entity received from remote resource</remarks>
    Task AddAsync(TEntity entity, CancellationToken cancellationToken = default);

    /// <summary>
    ///     Adds entities to set
    /// </summary>
    /// <param name="entities"></param>
    /// <param name="cancellationToken"></param>
    /// <remarks>Use to add entities which are uniquely identified, yet not appearing in a set</remarks>
    /// <remarks><br />Added entities which are uniquely identified, can not be created, but can be added. Useful for saving entities received from remote resource</remarks>
    Task AddAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default);

    /// <summary>
    ///     Deletes entity from set
    /// </summary>
    /// <param name="entity"></param>
    void Delete(TEntity entity);

    /// <summary>
    ///     Deletes entities from set
    /// </summary>
    /// <param name="entities"></param>
    void Delete(IEnumerable<TEntity> entities);

    /// <summary>
    ///     Transform query
    /// </summary>
    /// <param name="queryTransform"></param>
    /// <param name="asNoTracking">
    ///     Do not track entities materialized, increasing performance. Be aware, that returned data could not be deleted or updated, it must be added to a change
    ///     tracker manually
    /// </param>
    /// <returns></returns>
    public IQueryable<TEntity> Transform(Func<IQueryable<TEntity>, IQueryable<TEntity>> queryTransform, bool asNoTracking = false);

    /// <summary>
    ///     Returns Entity queryable
    /// </summary>
    /// <param name="asNoTracking">
    ///     Do not track entities materialized, increasing performance. Be aware, that returned data could not be deleted or updated, it must be added to a change
    ///     tracker manually
    /// </param>
    /// <returns></returns>
    IQueryable<TEntity> Query(bool asNoTracking = false);

    /// <summary>
    ///     Returns Entity DbSet
    /// </summary>
    /// <returns></returns>
    DbSet<TEntity> DbSet();

    EntityEntry<TEntity> Attach(TEntity entity);
    void Attach(IEnumerable<TEntity> entities);
}